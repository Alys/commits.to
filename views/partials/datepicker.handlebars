<script>
  $(document).ready(function() {
    var timeMatch = /^((0?[1-9]|1[012])(:[0-5]\d){0,2}(\s?[AP]M))$|^([01]\d|2[0-3])(:[0-5]\d){0,2}$/i

    var $inputDate = $('#input_date-{{id}}').pickadate();
    var datePicker = $inputDate.pickadate('picker');

    var $inputTime = $('#input_time-{{id}}').pickatime({
      editable: true // FIXME not sure this is actually doing anything
    });
    var timePicker = $inputTime.pickatime('picker');

    var setDate = function() {
      var value = moment($inputTextDate.val() + ' ' + $inputTextTime.val());
      console.log('setDate', value)
      $('#{{id}}').val(value);
    }

    var $inputTextDate = $('#input_date_text-{{id}}').on({
      change: parseDate,
      focus: function() {
        datePicker.open(false);
      },
      blur: function() {
        datePicker.close();
      }
    });

    var $inputTextTime = $('#input_time_text-{{id}}').on({
      change: parseDate,
      focus: function() {
        // timePicker.open(false);
      },
      blur: function() {
        // timePicker.close();
        console.log('blur')
        const inputDataValue = $('#input_time_text-{{id}}').val();
        if (inputDataValue && inputDataValue.trim().match(timeMatch)) {
          console.log('valid',  inputDataValue)
          $inputTextTime.removeClass('invalid');
          $inputTextTime.attr('data-value', inputDataValue.toUpperCase());
          setDate();
        } else {
          $inputTextTime.addClass('invalid');
        }
      }
    });

    var setTimeField = function(value) {
      const inputValue = $inputTextTime.val(); //|| moment($inputTextTime.data('value')).format('hh:mm A');
      console.log('set time', value, inputValue);
      $inputTextTime.val(value);
      setDate();
    };

    var parseDate = function(value) {
      if (!value) return;
      // FIXME: handle timezones better
      var parsedDate = moment(value);
      // var userTimezoneOffset = date.getTimezoneOffset() * 60000;
      // var parsedDate = new Date(date.getTime() + userTimezoneOffset);

      if (parsedDate) {
        console.log('parseDate', value, parsedDate);
        datePicker.set('select', new Date(value));
        setTimeField(parsedDate.format('hh:mm A'));
        $inputTextTime.val(parsedDate.format('hh:mm A'));
      }
    }

    datePicker.on('set', function() {
      const value = this.get('value');
      console.log('set date value', value);
      console.log('set date val', $inputTextDate.val());
      $inputTextDate.val(value);
      setDate();
    });

    parseDate($inputTextDate.attr('data-value')); // init with url value or default to tomorrow
  });
</script>

<div class="promise-picker">
  <fieldset>
    <input id="input_date-{{id}}" type="text" class="time-input">
    <input id="input_date_text-{{id}}" type="text" data-value="{{value}}" class="text-input" readonly>
  </fieldset>

  <fieldset>
    <input id="input_time_text-{{id}}" type="text" data-value="{{value}}" class="text-input">
  </fieldset>

  <input id="{{id}}" name="{{id}}" type="hidden" value="{{value}}">
</div>
